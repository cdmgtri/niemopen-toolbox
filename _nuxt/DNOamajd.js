import{_ as L}from"./B3QokqL9.js";import{b as A,_ as H,c as Z,a as G}from"./Cv0iLtbJ.js";import{_ as J,v as D,a as K,b as W,c as Q,d as Y,e as ee,f as oe,i as ne,g as te,h as se,F as le}from"./3MUQeXho.js";import{i as ae,j as y,l as b,k as ie,o as re,c as me,b as s,w as a,a as u,d as f,e as l,m as ue,F as fe,n as ce}from"./qZ1Z2gf-.js";import{_ as de}from"./Dn2P6ws4.js";import{i as p,l as S,b as I}from"./cgod6wvZ.js";import{_ as pe}from"./DlAUqK2U.js";import"./DH2XsfIj.js";import"./CnS8ArCL.js";import"./6bm_RRcn.js";import"./Cpj98o6Y.js";const _e=ae({__name:"transform",setup(be){const t=y({status:"unsent",category:"unsent",title:"",message:"",filename:"",time:""}),n=y({from:void 0,to:void 0,file:void 0}),v=[{value:"cmf",label:"CMF XML",icon:p.cmf},{value:"xsd",label:"NIEM XSD",icon:p.xml}],k=v.concat([{value:"json_schema",label:"JSON Schema",icon:p.json},{value:"owl",label:"OWL",icon:p.owl}]),M=b(()=>{var o;return(o=v.find(e=>e.value==n.from))==null?void 0:o.icon}),x=b(()=>{var o;return(o=k.find(e=>e.value===n.to))==null?void 0:o.icon}),E=b(()=>{var o;return`curl -i -X POST -H "Content-Type: multipart/form-data" -F from=${n.from} -F to=${n.to} -F file=@${(o=n.file)==null?void 0:o.name} ${I.transform}`}),T=[{label:"Crash Driver CMF",icon:p.cmf,onSelect:X},{label:"Crash Driver XSD ZIP",icon:p.xml,onSelect:N},{label:"Invalid Crash Driver CMF",icon:p.error,onSelect:h}],g=ie("");function U(o){const e=ne();return D(e,"file",o.file),D(e,"from",o.from),D(e,"to",o.to),e}function V(o){var r,m;g.value="";const i=o.target.files;if(!i||i.length==0)return;switch(n.file=i[0],(m=(r=n.file.name)==null?void 0:r.split("."))==null?void 0:m.pop()){case void 0:return;case"cmf":case"xml":n.from="cmf";break;case"xsd":case"zip":n.from="xsd";break;default:n.from=void 0,g.value="Please select a valid file (.xml, .cmf, .xsd, .zip)";break}}let q=b(()=>{switch(n.to){case"cmf":return"cmf.xml";case"xsd":return"zip";case"owl":return"ttl";case"json_schema":return"schema.json"}});async function R(){var i,c,r;let o=Date.now();t.status="pending",t.category="pending",t.message="Request sent...",console.log("Sending transform request",n.from,n.to,n.file);const e=await fetch(I.transform,{body:te(n),method:"post"});if(t.time=se(o),console.log(e),e.ok){const m=await e.blob(),d=e.headers.get("Content-Disposition");t.filename=(d==null?void 0:d.split("=")[1])||"transform-results."+q,le.saveAs(m,t.filename),t.category="success",t.error=void 0,t.title="",t.message=`Downloaded ${t.filename}`,console.log("Request succeeded",t.filename)}else t.category="error",t.error=await e.json()||await e.text(),t.title=`ERROR ${(i=t.error)==null?void 0:i.status}: ${(c=t.error)==null?void 0:c.error}`,t.message=((r=t.error)==null?void 0:r.message.replaceAll(";",`

`))||"",console.error("Request failed");t.status="returned"}async function X(){F("CrashDriver.cmf.xml","cmf")}async function h(){F("CrashDriver-0.6.cmf.xml","cmf")}async function N(){F("CrashDriver.zip","xsd")}async function F(o,e){const c=await(await fetch("demo/transform/"+o)).blob(),r=o.split("/").pop()||"input.text",m=new File([c],r),d=new DataTransfer;d.items.add(m);const _=document.getElementById("file");_.files=d.files,n.file=m,n.from=e}return(o,e)=>{const i=L,c=A,r=K,m=H,d=W,_=ce,P=de,B=Z,C=Q,$=Y,j=ee,z=G,O=oe;return re(),me(fe,null,[s(m,{link:("links"in o?o.links:l(S)).transform},{info:a(()=>[e[9]||(e[9]=u("p",null," Transform a NIEM subset, schema, IEPD schemas, or message model in either CMF or NIEM XML Schema to another supported format. ",-1)),u("p",null,[e[4]||(e[4]=f(" This functionality leverages the ")),s(i,{link:("links"in o?o.links:l(S)).cmfTool},null,8,["link"]),e[5]||(e[5]=f()),s(c,null,{default:a(()=>e[2]||(e[2]=[f("version 0.7-alpha.6")])),_:1}),e[6]||(e[6]=f(" which supports ")),s(i,{link:("links"in o?o.links:l(S)).cmf},null,8,["link"]),e[7]||(e[7]=f()),s(c,null,{default:a(()=>e[3]||(e[3]=[f("version 0.8")])),_:1}),e[8]||(e[8]=f(". "))]),e[10]||(e[10]=u("p",{class:"font-medium"},"Tips:",-1)),e[11]||(e[11]=u("ul",{class:"bullets"},[u("li",null," CMF inputs have to be the version supported by this tool. "),u("li",null," CMF version migration is not automated and must be done by hand. "),u("li",null," NIEM XSD inputs can be a single schema as a XSD file or multiple schemas in a zip file. "),u("li",null," Validation or conformance errors may lead to transform failure. ")],-1)),e[12]||(e[12]=u("br",null,null,-1))]),developer:a(()=>[s(r,{title:"POST request",code:l(E)},null,8,["code"])]),_:1},8,["link"]),s(z,null,{default:a(()=>[s(j,{state:l(n),validate:U,onSubmit:ue(R,["prevent"]),enctype:"multipart/form-data"},{default:a(()=>[s(C,{name:"file",required:"",error:l(g),label:"1. Select a model input file",help:"Do not upload sensitive or distribution-restricted files."},{default:a(()=>[s(B,null,{default:a(()=>[s(d,{onChange:V,class:"w-[600px]"},{trailing:a(()=>e[13]||(e[13]=[f("(CMF | XSD | ZIP)")])),_:1}),s(_,{color:"neutral",variant:"subtle",label:"Demo"}),s(P,{items:T},{default:a(()=>[s(_,{color:"neutral",variant:"subtle",icon:("icons"in o?o.icons:l(p)).down},null,8,["icon"])]),_:1})]),_:1})]),_:1},8,["error"]),s(C,{name:"from",required:"",label:"2. Select input file format"},{default:a(()=>[s($,{modelValue:l(n).from,"onUpdate:modelValue":e[0]||(e[0]=w=>l(n).from=w),items:v,icon:l(M),class:"w-64"},null,8,["modelValue","icon"])]),_:1}),s(C,{name:"to",required:"",label:"3. Select transformation format"},{default:a(()=>[s($,{modelValue:l(n).to,"onUpdate:modelValue":e[1]||(e[1]=w=>l(n).to=w),items:l(k),icon:l(x),class:"w-64"},null,8,["modelValue","items","icon"])]),_:1}),s(_,{type:"submit",ui:("ui"in o?o.ui:l(J)).button_default},{default:a(()=>e[14]||(e[14]=[f("Transform")])),_:1},8,["ui"])]),_:1},8,["state"])]),_:1}),s(O,{results:l(t)},null,8,["results"])],64)}}}),Me=pe(_e,[["__scopeId","data-v-b9f66c61"]]);export{Me as default};
