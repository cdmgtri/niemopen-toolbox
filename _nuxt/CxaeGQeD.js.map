{"version":3,"file":"CxaeGQeD.js","sources":["../../../../pages/transform.vue"],"sourcesContent":["\n<template>\n  <PageHeader :page=\"AppItems.transform\">\n    <template #user>\n      <p>\n        Transform a NIEM subset, schema, IEPD schemas, or message model in either CMF or NIEM XML Schema to another supported format.\n      </p>\n\n      <p>\n        This functionality leverages the <ToolboxLink :link=\"AppItems.cmfToolRepo\"/> <UKbd>version 0.7-alpha.6</UKbd> which supports <ToolboxLink :link=\"AppItems.cmfRepo\"/> <UKbd>version 0.8</UKbd>.\n      </p>\n\n      <p class=\"font-medium\">Tips:</p>\n\n      <ul class=\"bullets\">\n        <li>\n          CMF inputs have to be the version supported by this tool.\n        </li>\n        <li>\n          CMF version migration is not automated and must be done by hand.\n        </li>\n        <li>\n          NIEM XSD inputs can be a single schema as a XSD file or multiple schemas in a zip file.\n        </li>\n        <li>\n          Validation or conformance errors may lead to transform failure.\n        </li>\n      </ul>\n      <br/>\n    </template>\n\n    <template #developer>\n      <ToolboxCodePanel title=\"POST request\" :code=\"code\"/>\n    </template>\n  </PageHeader>\n\n  <UCard>\n\n    <UForm ref=\"form\"\n    :state=\"state\"\n    :validate=\"validate\" :validate-on=\"['change']\"\n    @submit.prevent=\"onSubmit\" enctype=\"multipart/form-data\"\n    >\n\n      <!-- Input file -->\n      <UFormField\n      name=\"file\" required :error=\"fileError\"\n      label=\"1. Select a model input file\"\n      :help=\"ToolboxForm.fileWarning(inputMode == 'upload')\"\n      >\n\n        <!-- Upload file input -->\n        <span v-if=\"inputMode=='upload'\">\n          <UInput type=\"file\" @change=\"onFileChange\" :accept=\"accept\" :icon=\"icons.upload\" :ui=\"UI.inputFileInGroup\">\n            <template #trailing>(CMF | XSD | ZIP)</template>\n          </UInput>\n        </span>\n\n        <!-- Demo file input -->\n        <span v-else>\n          <UInput v-model=\"demoFile\" :ui=\"UI.inputFileInGroup\" :icon=\"icons.magic\"/>\n        </span>\n\n        <!-- Select upload file or demo file option -->\n        <!-- @vue-expect-error -->\n        <USelect v-model=\"inputMode\" :items=\"inputModeItems\" color=\"neutral\" variant=\"subtle\" :ui=\"UI.inputMode\" :icon=\"inputModeItem?.icon\"/>\n\n      </UFormField>\n\n      <!-- Select from -->\n      <UFormField name=\"from\" required label=\"2. Select input file format\">\n        <USelect v-model=\"state.from\" :items=\"fromItems\" :icon=\"fromItem?.icon\" class=\"w-64\"/>\n      </UFormField>\n\n      <!-- Select to -->\n      <UFormField name=\"to\" required label=\"3. Select transformation format\">\n        <USelect v-model=\"state.to\" :items=\"toItems\" :icon=\"toItem?.icon\" class=\"w-64\"/>\n      </UFormField>\n\n      <UButton type=\"submit\">Transform</UButton>\n\n    </UForm>\n\n  </UCard>\n\n  <APIResponsePanel :results=\"results\"/>\n</template>\n\n<script setup lang=\"ts\">\nimport type { Form, SelectItem } from '@nuxt/ui';\nimport type { ShallowRef, ShallowUnwrapRef } from 'vue';\n\n\n\n// *** Input mode ***\n\ntype InputMode = \"upload\" | \"cmf\" | \"xsd\" | \"cmf-invalid\" | \"text\";\n\n// Allow user to choose between uploading file and using an available demo file\nconst inputMode = ref<InputMode>(\"upload\");\n\ntype InputModeItem = SelectItem & {\n  value?: InputMode,\n  icon?: IconType,\n  from?: \"cmf\" | \"xsd\",\n  path?: string\n}\n\nconst inputModeItems: InputModeItem[] = [\n  {\n    value: \"upload\",\n    label: \"Upload\",\n    icon: icons.upload\n  },\n  {\n    type: \"separator\"\n  },\n  {\n    label: \"Valid examples\",\n    type: \"label\"\n  },\n  {\n    value: \"cmf\",\n    label: \"CMF\",\n    icon: icons.cmf,\n    from: \"cmf\",\n    path: \"demo/transform/CrashDriver-5.0.cmf.xml\"\n  },\n  {\n    value: \"xsd\",\n    label: \"XSD\",\n    icon: icons.xml,\n    from: \"xsd\",\n    path: \"demo/transform/CrashDriver-5.0.zip\"\n  },\n  {\n    type: \"separator\"\n  },\n  {\n    label: \"Invalid examples\",\n    type: \"label\"\n  },\n  {\n    value: \"cmf-invalid\",\n    label: \"CMF 0.6\",\n    icon: icons.error,\n    from: \"cmf\",\n    path: \"demo/transform/CrashDriver-5.0-CMFv0.6.cmf.xml\"\n  },\n  {\n    value: \"text\",\n    label: \".txt file\",\n    icon: icons.error,\n    from: undefined,\n    path: \"demo/transform/CrashDriver-5.0.txt\"\n  }\n]\n\nconst inputModeItem = computed(() => {\n  return inputModeItems.find(item => item.value == inputMode.value);\n})\n\nconst demoFile = ref();\n\n// Reset state when switching input modes\nwatch(inputMode, async (newValue, oldValue) => {\n  if (inputModeItem.value && inputMode.value != \"upload\") {\n    state.file = await ToolboxForm.loadPublicFile(inputModeItem.value.path)\n    demoFile.value = state.file?.name;\n    state.from = inputModeItem.value?.from;\n  }\n  else {\n    state.file = undefined;\n    state.from = undefined;\n  }\n  form.value.clear();\n  results.request = \"unsent\";\n});\n\n\n// *** State ***\n\ntype FromType = \"cmf\" | \"xsd\";\ntype ToType = FromType | \"json_schema\" | \"owl\";\n\ntype TransformStateType = {\n  from: FromType,\n  to: ToType,\n  file: File\n}\n\nconst state = reactive<Partial<TransformStateType>>({});\n\nconst fromItems = [\n  {\n    value: \"cmf\",\n    label: \"CMF XML\",\n    icon: icons.cmf,\n    extensions: [\"cmf\", \"xml\"]\n  },\n  {\n    value: \"xsd\",\n    label: \"NIEM XSD\",\n    icon: icons.xml,\n    extensions: [\"zip\", \"xsd\"]\n  }\n];\n\nconst toItems = [\n  ...fromItems,\n  {\n    value: \"json_schema\",\n    label: \"JSON Schema\",\n    icon: icons.json,\n    extensions: [\"schema.json\", \"jschema\", \"json\"]\n\n  },\n  {\n    value: \"owl\",\n    label: \"OWL\",\n    icon: icons.owl,\n    extensions: [\"ttl\"]\n  }\n];\n\nconst fromItem = computed(() => {\n  return fromItems.find(item => item.value == state.from);\n});\n\nconst toItem = computed(() => {\n  return toItems.find(item => item.value === state.to);\n});\n\nconst extension = computed(() => {\n  return ToolboxApp.extension(state.file?.name);\n});\n\nconst fromExtensions = fromItems.flatMap(item => item.extensions);\nconst accept = fromExtensions.map(extension => \".\" + extension).join(\", \");\n\n\n// *** File change ***\n\n/**\n * Update the file state since `v-model` doesn't work on file inputs.\n * Set the default state.from value\n */\n\nasync function onFileChange(event: Event) {\n  fileError.value = \"\";\n  state.file = ToolboxForm.fileInput(event);\n  state.from = defaultFrom();\n  results.request = \"unsent\"\n  await form.value.validate({name: \"\", silent: true});\n}\n\nfunction defaultFrom() {\n  switch (extension.value) {\n    case \"cmf\":\n    case \"xml\":\n    case \"cmf.xml\":\n      return \"cmf\";\n\n    case \"xsd\":\n    case \"zip\":\n      return \"xsd\";\n\n    default:\n      return undefined;\n  }\n}\n\n\n// *** Developer information panel ***\n\nconst code = computed(() => `curl -i -X POST -H \"Content-Type: multipart/form-data\" -F from=${ state.from } -F to=${ state.to } -F file=@${ state.file?.name } ${ API.routes.transform }`);\n\n\n// *** Form validation ***\n\nconst form = useTemplateRef(\"form\") as Readonly<ShallowRef<ShallowUnwrapRef<Form<TransformStateType>>>>;\n\nconst fileError: Ref<string | undefined> = ref();\n\nlet validationFinalPass = false;\n\nfunction validate(state: Partial<TransformStateType>) {\n\n  const errors = ToolboxForm.initFormErrors();\n  fileError.value = undefined;\n\n  // Skip validation until form submission\n  if (validationFinalPass) {\n    ToolboxForm.validateRequiredField(errors, \"from\", state.from);\n    ToolboxForm.validateRequiredField(errors, \"to\", state.to);\n    ToolboxForm.validateRequiredField(errors, \"file\", state.file);\n\n    ToolboxForm.validateFileExtension(errors, \"file\", fromExtensions, extension.value);\n  }\n\n  return errors;\n}\n\n\n// *** Submit ***\n\nconst results = API.initResults();\n\nasync function onSubmit() {\n  // Include file in final round of validation check\n  validationFinalPass = true;\n  let validateResults = await form.value?.validate({name: \"\", silent: true});\n  if (validateResults == false) {\n    validationFinalPass = false;\n    return;\n  }\n\n  const response = await API.post(API.routes.transform, state, results);\n  await API.downloadFileResults(response, results);\n\n  // Reset validation checks\n  validationFinalPass = false;\n}\n\n</script>\n"],"names":["inputMode","ref","inputModeItems","icons","inputModeItem","computed","item","demoFile","watch","newValue","oldValue","state","ToolboxForm","_a","_b","form","results","reactive","fromItems","toItems","fromItem","toItem","extension","ToolboxApp","fromExtensions","accept","onFileChange","event","fileError","defaultFrom","code","API","useTemplateRef","validationFinalPass","validate","errors","onSubmit","response"],"mappings":"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"}