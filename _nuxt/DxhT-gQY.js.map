{"version":3,"file":"DxhT-gQY.js","sources":["../../../../pages/migrate.vue"],"sourcesContent":["\n<template>\n  <PageHeader :page=\"AppItems.migrate\">\n    <template #user>\n      <p>\n        Migrate a NIEM subset to a more recent version of NIEM.\n      </p>\n\n      <p class=\"font-medium\">Use the <ULink to=\"/transform\">Transform</ULink> feature to:</p>\n\n      <ul class=\"bullets\">\n        <li>Convert existing NIEM XML schemas to CMF if needed for the migration.</li>\n        <li>Convert the migration output to NIEM XML schemas, JSON schema, or another supported output format.</li>\n      </ul>\n\n      <p>Note that multi-step migration is possible in a single request.  Any migration issues between versions will be aggregated into a single results file.</p>\n\n      <br/>\n    </template>\n\n    <template #developer>\n      <ToolboxCodePanel title=\"POST request\" :code=\"code\"/>\n    </template>\n  </PageHeader>\n\n  <UCard>\n\n    <UForm ref=\"form\"\n      :state=\"state\"\n      :validate=\"validate\" :validate-on=\"['change']\"\n      @submit.prevent=\"onSubmit\" enctype=\"multipart/form-data\"\n    >\n\n      <!-- Input file -->\n      <UFormField\n      name=\"file\" required :error=\"fileError\"\n      label=\"1. Select a CMF file to migrate (NIEM subsets only)\"\n      :help=\"ToolboxForm.fileWarning(inputMode == 'upload')\"\n      >\n\n        <!-- Upload file input -->\n        <span v-if=\"inputMode=='upload'\">\n          <UInput type=\"file\" id=\"uploadFileElement\" @change=\"onFileChange\" accept=\".cmf,.cmf.xml,.xml\" :icon=\"icons.upload\" :ui=\"UI.inputFileInGroup\">\n            <template #trailing>(CMF)</template>\n          </UInput>\n        </span>\n\n        <!-- Demo file input -->\n        <span v-else>\n          <UInput v-model=\"demoFile\" :ui=\"UI.inputFileInGroup\" :icon=\"icons.magic\"/>\n        </span>\n\n        <!-- Select upload file or demo file option -->\n        <!-- @vue-expect-error -->\n        <USelect v-model=\"inputMode\" :items=\"inputModeItems\" color=\"neutral\" variant=\"subtle\" :ui=\"UI.inputMode\" :icon=\"inputModeItem?.icon\"/>\n\n      </UFormField>\n\n      <!-- Select from -->\n      <UFormField name=\"from\" required label=\"2. Select current version\">\n        <USelect v-model=\"state.from\" :items=\"fromItems\" :icon=\"icons.start\" class=\"w-64\"/>\n      </UFormField>\n\n      <!-- Select to -->\n      <UFormField name=\"to\" required label=\"3. Select migration version\">\n        <USelect v-model=\"state.to\" :items=\"toItems\" :icon=\"icons.end\" class=\"w-64\"/>\n      </UFormField>\n\n      <UButton type=\"submit\">Migrate</UButton>\n\n    </UForm>\n\n  </UCard>\n\n  <APIResponsePanel :results=\"results\"/>\n</template>\n\n<script setup lang=\"ts\">\nimport type { SelectItem } from '@nuxt/ui';\n\n\n// LATER: Support all models available through the API\n\n\n// *** Input mode ***\n\ntype InputMode = \"upload\" | \"valid\" | \"invalid\";\n\n// Allow user to choose between uploading a file and using an available demo file\nconst inputMode = ref<InputMode>(\"upload\");\n\ntype InputModeItem = SelectItem & {\n  value?: InputMode,\n  icon?: IconType,\n  path?: string\n}\n\nconst inputModeItems: InputModeItem[] = [\n  {\n    value: \"upload\",\n    icon: icons.upload,\n    label: \"Upload\"\n  },\n  {\n    type: \"separator\"\n  },\n  {\n    type: \"label\",\n    label: \"Demo files\"\n  },\n  {\n    value: \"valid\",\n    icon: icons.success,\n    label: \"Valid\",\n    path: \"demo/migrate/CrashDriver-NIEM-5.0.cmf.xml\"\n  },\n  {\n    value: \"invalid\",\n    icon: icons.error,\n    label: \"Invalid\",\n    path: \"demo/migrate/CrashDriver-NIEM-5.0-v0.6.cmf.xml\"\n  }\n]\n\nconst inputModeItem = computed(() => {\n  return inputModeItems.find(item => item.value == inputMode.value)\n});\n\nconst demoFile = ref();\n\nwatch(inputMode, async(value, oldValue) => {\n  // Download demo file and update the state\n  if (inputModeItem.value && inputMode.value != \"upload\") {\n    state.file = await ToolboxForm.loadPublicFile(inputModeItem.value.path)\n    demoFile.value = state.file?.name;\n    state.from = \"5.0\";\n  }\n  else {\n    state.file = undefined;\n    state.from = undefined;\n  }\n});\n\n// *** State ***\n\ntype MigrateStateType = {\n  from: string,\n  to: string,\n  file: File\n}\n\nconst state = reactive<Partial<MigrateStateType>>({});\n\n// LATER: Get all version numbers from API\nconst allItems = [\"1.0\", \"2.0\", \"2.1\", \"3.0\", \"3.1\", \"3.2\", \"4.0\", \"4.1\", \"4.2\", \"5.0\", \"5.1\", \"5.2\"];\n\n// Include all but the most recent version as the starting point for the migration\nconst fromItems = ref(allItems.slice(0, -1));\n\n// Include all but the first version by default, or filter based on the selected from value\nconst toItems = computed(() => {\n  if (state.from != undefined) {\n    // Return more recent versions than the one selected\n    return allItems.slice(1).filter(version => version > (state.from || \"\"));\n  }\n  else {\n    // Return all but the first version by default\n    return allItems.slice(1);\n  }\n});\n\n\n// *** File change ***\n\n/**\n * Update the file state since `v-model` doesn't work on file inputs.\n */\nfunction onFileChange(event: Event) {\n  fileError.value = \"\";\n  state.file = ToolboxForm.fileInput(event);\n  results.request = \"unsent\";\n}\n\n\n\n// *** Developer information panel **\n\nconst code = computed(() => `curl -i -X POST -H \"Content-Type: multipart/form-data\" -F from=${ state.from } -F to=${ state.to } -F file=@${ state.file?.name } ${ API.routes.migrate }`);\n\n\n// *** Form validation ***\n\nconst form = useTemplateRef(\"form\");\n\nconst fileError = ref<string | undefined>(\"\");\n\nconst extension = computed(() => {\n  return ToolboxApp.extension(state.file?.name);\n});\n\nlet validationFinalPass = false;\n\nfunction validate(state: Partial<MigrateStateType>) {\n  const errors = ToolboxForm.initFormErrors();\n  fileError.value = undefined;\n\n  // Check that from and to fields have been selected\n  ToolboxForm.validateRequiredField(errors, \"from\", state.from);\n  ToolboxForm.validateRequiredField(errors, \"to\", state.to);\n\n  // Check that a file has been uploaded or selected and has a valid extension\n  if (validationFinalPass){\n    ToolboxForm.validateRequiredField(errors, \"file\", state.file);\n    ToolboxForm.validateFileExtension(errors, \"file\", [\"cmf\", \"xml\", \"cmf.xml\"], extension.value);\n  }\n\n  return errors;\n}\n\n\n// *** Submit ***\n\nconst results = API.initResults();\n\nasync function onSubmit() {\n  console.log(\"Sending migration request\", state.from, state.to, state.file);\n\n  validationFinalPass = true;\n  let validateResults = await form.value?.validate();\n  if (validateResults == false) return;\n\n  const response = await API.post(API.routes.migrate, state, results);\n  await API.downloadFileResults(response, results);\n\n  // Reset validation checks\n  validationFinalPass = false;\n}\n\n</script>\n"],"names":["inputMode","ref","inputModeItems","icons","inputModeItem","computed","item","demoFile","watch","value","oldValue","state","ToolboxForm","_a","reactive","allItems","fromItems","toItems","version","onFileChange","event","fileError","results","code","API","form","useTemplateRef","extension","ToolboxApp","validationFinalPass","validate","errors","onSubmit","response"],"mappings":"6rBAyFM,MAAAA,EAAYC,EAAe,QAAQ,EAQnCC,EAAkC,CACtC,CACE,MAAO,SACP,KAAMC,EAAM,OACZ,MAAO,QACT,EACA,CACE,KAAM,WACR,EACA,CACE,KAAM,QACN,MAAO,YACT,EACA,CACE,MAAO,QACP,KAAMA,EAAM,QACZ,MAAO,QACP,KAAM,2CACR,EACA,CACE,MAAO,UACP,KAAMA,EAAM,MACZ,MAAO,UACP,KAAM,gDAAA,CAEV,EAEMC,EAAgBC,EAAS,IACtBH,EAAe,KAAKI,GAAQA,EAAK,OAASN,EAAU,KAAK,CACjE,EAEKO,EAAWN,EAAI,EAEfO,EAAAR,EAAW,MAAMS,EAAOC,IAAa,OAErCN,EAAc,OAASJ,EAAU,OAAS,UAC5CW,EAAM,KAAO,MAAMC,EAAY,eAAeR,EAAc,MAAM,IAAI,EAC7DG,EAAA,OAAQM,EAAAF,EAAM,OAAN,YAAAE,EAAY,KAC7BF,EAAM,KAAO,QAGbA,EAAM,KAAO,OACbA,EAAM,KAAO,OACf,CACD,EAUK,MAAAA,EAAQG,EAAoC,EAAE,EAG9CC,EAAW,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAK,EAG9FC,EAAYf,EAAIc,EAAS,MAAM,EAAG,EAAE,CAAC,EAGrCE,EAAUZ,EAAS,IACnBM,EAAM,MAAQ,KAETI,EAAS,MAAM,CAAC,EAAE,OAAkBG,GAAAA,GAAWP,EAAM,MAAQ,GAAG,EAIhEI,EAAS,MAAM,CAAC,CAE1B,EAQD,SAASI,EAAaC,EAAc,CAClCC,EAAU,MAAQ,GACZV,EAAA,KAAOC,EAAY,UAAUQ,CAAK,EACxCE,EAAQ,QAAU,QAAA,CAOpB,MAAMC,EAAOlB,EAAS,WAAM,wEAAmEM,EAAM,IAAK,UAAWA,EAAM,EAAG,cAAcE,EAAAF,EAAM,OAAN,YAAAE,EAAY,IAAK,IAAKW,EAAI,OAAO,OAAQ,GAAE,EAKjLC,EAAOC,EAAe,MAAM,EAE5BL,EAAYpB,EAAwB,EAAE,EAEtC0B,EAAYtB,EAAS,IAAM,OAC/B,OAAOuB,GAAW,WAAUf,EAAAF,EAAM,OAAN,YAAAE,EAAY,IAAI,CAAA,CAC7C,EAED,IAAIgB,EAAsB,GAE1B,SAASC,EAASnB,EAAkC,CAC5C,MAAAoB,EAASnB,EAAY,eAAe,EAC1C,OAAAS,EAAU,MAAQ,OAGlBT,EAAY,sBAAsBmB,EAAQ,OAAQpB,EAAM,IAAI,EAC5DC,EAAY,sBAAsBmB,EAAQ,KAAMpB,EAAM,EAAE,EAGpDkB,IACFjB,EAAY,sBAAsBmB,EAAQ,OAAQpB,EAAM,IAAI,EAChDC,EAAA,sBAAsBmB,EAAQ,OAAQ,CAAC,MAAO,MAAO,SAAS,EAAGJ,EAAU,KAAK,GAGvFI,CAAA,CAMH,MAAAT,EAAUE,EAAI,YAAY,EAEhC,eAAeQ,GAAW,OAKxB,GAJA,QAAQ,IAAI,4BAA6BrB,EAAM,KAAMA,EAAM,GAAIA,EAAM,IAAI,EAEnDkB,EAAA,GACA,OAAMhB,EAAAY,EAAK,QAAL,YAAAZ,EAAY,aACjB,GAAO,OAExB,MAAAoB,EAAW,MAAMT,EAAI,KAAKA,EAAI,OAAO,QAASb,EAAOW,CAAO,EAC5D,MAAAE,EAAI,oBAAoBS,EAAUX,CAAO,EAGzBO,EAAA,EAAA"}